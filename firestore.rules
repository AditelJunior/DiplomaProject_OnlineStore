rules_version = '2';

service cloud.firestore {
	match /databases/{database}/documents {
		// ---------------------------------------------------------
		// Rowy rules start
		// ---------------------------------------------------------
		// Automatically generated and managed by Rowy
		// ⚠️ Do not edit this block directly, as it will be overwritten
		// To edit the security rules, please do it on different block or manage from rowy settings
		// initialized on 2/14/2024
		match /{collectionId}/{docId} {
			allow read, create, update: if colRule(["products","home_carousel"], ["ADMIN","EDITOR","OWNER"]);
			allow delete: if colRule(["products"], ["ADMIN","EDITOR","OWNER"]);
			allow delete: if colRule(["home_carousel"], ["ADMIN","OWNER"]);
			
			function colRule(collections, roles){
				return collectionId in collections && hasAnyRole(roles);
			}
			
		}
		match /{somePath=**}/{collectionGroupId}/{docId}{
			allow read, create, update, delete: if colRule(["weapons"], ["ADMIN","OWNER"]);
			
			function colRule(collections, roles){
				return collectionGroupId in collections && hasAnyRole(roles);
			}
			
		}
		
		// ---------------------------------------------------------
		// Rowy rules end
		// ---------------------------------------------------------
		// Allow admins to read and write all documents
		match /{document=**} {
			allow read, write: if hasAnyRole(["ADMIN", "OWNER"]);
		}
		
		// Rowy: Allow signed in users to read Rowy configuration and admins to write
		match /_rowy_/{docId} {
			allow read: if request.auth.token.roles.size() > 0;
			allow write: if hasAnyRole(["ADMIN", "OWNER"]);
			match /{document=**} {
				allow read: if request.auth.token.roles.size() > 0;
				allow write: if hasAnyRole(["ADMIN", "OWNER"]);
			}
			match /schema/{tableId} {
				allow update: if canModify(tableId,'pc')
			match /{document=**} {allow read,write: if canModify(tableId,'pc')}
		}
		match /groupSchema/{tableId} {
			allow update: if canModify(tableId,'cg')
		match /{document=**} {allow read,write: if canModify(tableId,'cg')}
	}
	function canModify(tableId,tableType) {
		return hasAnyRole(get(/databases/$(database)/documents/_rowy_/settings)
		.data.tablesSettings[tableType][tableId].modifiableBy)
	}
}
// Rowy: Allow users to edit their settings
match /_rowy_/userManagement/users/{userId} {
	allow get, update, delete: if isDocOwner(userId);
	allow create: if request.auth.token.roles.size() > 0;
}
// Rowy: Allow public to read public Rowy configuration
match /_rowy_/publicSettings {
	allow get: if true;
}

// Rowy: Utility functions
function isDocOwner(docId) {
	return request.auth != null && (request.auth.uid == resource.id || request.auth.uid == docId);
}
function hasAnyRole(roles) {
	return request.auth != null && request.auth.token.roles.hasAny(roles);
}

allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
allow read: if true;
// This rule allows anyone with your Firestore database reference to view, edit,
// and delete all data in your Firestore database. It is useful for getting
// started, but it is configured to expire after 30 days because it
// leaves your app open to attackers. At that time, all client
// requests to your Firestore database will be denied.
//
// Make sure to write security rules for your app before that time, or else
// all client requests to your Firestore database will be denied until you Update
// your rules
match /{document=**} {
	allow read: if true;
	allow write: if (auth.uid == 'aitmatov40@gmail.com');
}
// Custom default security rules for FireCMS. Modifying this rule will the usage of the FireCMS.
match /{document=**} {
	allow read, write: if request.auth.token.fireCMSUser;
}
}
}